---
export interface Props {
	title: string;
	description?: string;
	image?: string;
	url?: string;
}

const {
	title,
	description = "Dylan Acevedo - Desarrollador Full Stack Junior especializado en tecnologías web modernas. Experiencia en desarrollo de aplicaciones web, landing pages e integración de APIs.",
	image = "/imgs/dylan-preview.jpg",
	url = Astro.url.href
} = Astro.props;

import '../styles/global.css'

const structuredData = {
	"@context": "https://schema.org",
	"@type": "Person",
	"name": "Dylan Acevedo",
	"jobTitle": "Desarrollador Full Stack Junior",
	"description": "Desarrollador Full Stack Junior formado en Campuslands con experiencia en desarrollo web y tecnologías modernas",
	"url": "https://dylan-acevedo.dev",
	"sameAs": [
		"https://github.com/dylan-acevedo",
		"https://linkedin.com/in/dylan-acevedo"
	],
	"knowsAbout": [
		"JavaScript",
		"TypeScript",
		"React",
		"Node.js",
		"Python",
		"HTML5",
		"CSS3",
		"Desarrollo Web",
		"Full Stack Development"
	],
	"worksFor": {
		"@type": "Organization",
		"name": "Freelance"
	}
};
---

<!doctype html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="generator" content={Astro.generator} />

		<!-- SEO Básico -->
		<title>{title}</title>
		<meta name="description" content={description} />
		<meta name="keywords" content="Dylan Acevedo, desarrollador full stack, desarrollador web, JavaScript, TypeScript, React, Node.js, Python, HTML5, CSS3, portfolio, portafolio" />
		<meta name="author" content="Dylan Acevedo" />
		<meta name="robots" content="index, follow" />
		<link rel="canonical" href={url} />

		<!-- Open Graph / Facebook -->
		<meta property="og:type" content="website" />
		<meta property="og:url" content={url} />
		<meta property="og:title" content={title} />
		<meta property="og:description" content={description} />
		<meta property="og:image" content={new URL(image, Astro.url).href} />
		<meta property="og:site_name" content="Dylan Acevedo Portfolio" />
		<meta property="og:locale" content="es_ES" />

		<!-- Twitter Card -->
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:url" content={url} />
		<meta name="twitter:title" content={title} />
		<meta name="twitter:description" content={description} />
		<meta name="twitter:image" content={new URL(image, Astro.url).href} />
		<meta name="twitter:creator" content="@dylanacevedo" />

		<!-- Favicons y PWA -->
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
		<link rel="manifest" href="/site.webmanifest" />
		<meta name="theme-color" content="#23b82a" />
		<meta name="msapplication-TileColor" content="#23b82a" />

		<!-- Preload de fuentes críticas -->
		<link rel="preload" href="/fonts/Montserrat-Regular.ttf" as="font" type="font/ttf" crossorigin />

		<!-- JSON-LD Structured Data -->
		<script type="application/ld+json" set:html={JSON.stringify(structuredData)}></script>

		<!-- Performance y carga -->
		<meta name="format-detection" content="telephone=no" />
		<meta http-equiv="x-ua-compatible" content="ie=edge" />
	</head>
	<body class="min-h-screen bg-gray-50 font-sans">
		<!-- Scroll Progress Indicator -->
		<div class="scroll-progress"></div>

		<slot />

		<!-- GSAP and Animation Scripts -->
		<script>
			import { gsap } from 'gsap';
			import { ScrollTrigger } from 'gsap/ScrollTrigger';
			import Lenis from 'lenis';

			// Register GSAP plugins
			gsap.registerPlugin(ScrollTrigger);

			// Initialize Lenis for smooth scrolling with optimized settings
			const lenis = new Lenis({
				duration: 0.8,
				easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)),
				smoothWheel: true,
				smoothTouch: false,
				wheelMultiplier: 1.2,
				touchMultiplier: 2,
				syncTouch: true,
				infinite: false,
			});

			function raf(time) {
				lenis.raf(time);
				requestAnimationFrame(raf);
			}

			requestAnimationFrame(raf);

			// Global GSAP settings
			gsap.defaults({
				ease: "power3.out",
				duration: 0.8
			});

			// Configure ScrollTrigger
			ScrollTrigger.config({
				autoRefreshEvents: "visibilitychange,DOMContentLoaded,load",
				ignoreMobileResize: true
			});

			// Set up scroll-triggered animations
			document.addEventListener('DOMContentLoaded', () => {
				// Animate sections on scroll with enhanced settings
				gsap.utils.toArray('.animate-on-scroll').forEach((element, index) => {
					gsap.fromTo(element,
						{
							opacity: 0,
							y: 60,
							scale: 0.96,
							rotateX: 5
						},
						{
							opacity: 1,
							y: 0,
							scale: 1,
							rotateX: 0,
							duration: 1,
							delay: index * 0.1,
							ease: "power3.out",
							scrollTrigger: {
								trigger: element,
								start: "top 90%",
								end: "bottom 10%",
								toggleActions: "play none none reverse",
								refreshPriority: -1
							}
						}
					);
				});

				// Animate cards with enhanced stagger
				gsap.utils.toArray('.card-animate').forEach((container) => {
					gsap.fromTo(container.children,
						{
							opacity: 0,
							y: 40,
							rotateX: 10,
							scale: 0.9
						},
						{
							opacity: 1,
							y: 0,
							rotateX: 0,
							scale: 1,
							duration: 0.8,
							stagger: {
								amount: 0.4,
								from: "start"
							},
							ease: "power3.out",
							scrollTrigger: {
								trigger: container,
								start: "top 85%",
								toggleActions: "play none none reverse",
								refreshPriority: 0
							}
						}
					);
				});

				// Add scroll progress indicator
				gsap.to(".scroll-progress", {
					scaleX: 1,
					ease: "none",
					scrollTrigger: {
						trigger: "body",
						start: "top top",
						end: "bottom bottom",
						scrub: true
					}
				});
			});
		</script>
	</body>
</html>